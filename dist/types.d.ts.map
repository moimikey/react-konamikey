{"mappings":"AAEA,wBAAgB,MAAM,CAAC,EACrB,OAAkB,EAClB,QAAQ,EACR,OAAO,EACP,QAAe,GAChB;;;;;CAAA,OA8CA;AAED,eAAe,MAAM,CAAC","sources":["src/src/index.ts","src/index.ts"],"sourcesContent":[null,"import React, { useEffect, useRef } from \"react\";\n\nexport function Konami({\n  payload = () => {},\n  sequence,\n  element,\n  children = null,\n}) {\n  const pressed = useRef(0);\n\n  const onkeydown = (evt) => {\n    evt.key === sequence[pressed.current] ||\n    evt.key.substr(5).toLowerCase() === sequence[pressed.current] // ArrowXXXX\n      ? (pressed.current += 1)\n      : (pressed.current = 0);\n    if (pressed.current === sequence.length) {\n      payload();\n      pressed.current = 0;\n    }\n  };\n\n  const listen = () => {\n    if (element && element.addEventListener) {\n      element.addEventListener(\"keydown\", onkeydown);\n    }\n  };\n\n  const unlisten = () => {\n    if (element && element.removeEventListener) {\n      element.removeEventListener(\"keydown\", onkeydown);\n    }\n  };\n\n  useEffect(() => {\n    if (!(element instanceof Function)) {\n      element = element;\n    }\n    listen();\n\n    return () => {\n      unlisten();\n    };\n  }, [element]);\n\n  if (element instanceof Function) {\n    return element({\n      refFn: (ref) => {\n        element = ref;\n      },\n    });\n  }\n\n  return children;\n}\n\nexport default Konami;\n"],"names":[],"version":3,"file":"types.d.ts.map"}